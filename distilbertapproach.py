# -*- coding: utf-8 -*-
"""distilbertApproach.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LysDqDpnNRt1PoYMXGQzyyAETczva94L
"""

from transformers import DistilBertTokenizerFast, TFDistilBertForSequenceClassification
import tensorflow as tf
import numpy as np
import pandas as pd

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/datasets/spam.csv')

df.head(5)

df['label'] = df.Category.apply(lambda x: 1 if x=='spam' else 0)

df.head()

X = df.Message.tolist()
y = df.label

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

tokenizer = DistilBertTokenizerFast.from_pretrained('distilbert-base-uncased')

train_encodings = tokenizer(X_train, truncation=True, padding=True, return_tensors='tf')
test_encodings = tokenizer(X_test, truncation=True, padding=True, return_tensors='tf')

train_labels = tf.convert_to_tensor(y_train)
test_labels = tf.convert_to_tensor(y_test)

model = TFDistilBertForSequenceClassification.from_pretrained("distilbert-base-uncased", num_labels=2)

optimizer = tf.keras.optimizers.Adam(learning_rate=5e-5)
loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)

# Pass the optimizer as a string identifier and provide the learning rate
model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=5e-5), loss=loss, metrics=['accuracy'])

model.fit(
    x={'input_ids': train_encodings['input_ids'], 'attention_mask': train_encodings['attention_mask']},
    y=train_labels,
    validation_data=(
        {'input_ids': test_encodings['input_ids'], 'attention_mask': test_encodings['attention_mask']},
        test_labels
    ),
    epochs=3,
    batch_size=16
)

# Evaluation
loss, acc = model.evaluate(
    x={'input_ids': test_encodings['input_ids'], 'attention_mask': test_encodings['attention_mask']},
    y=test_labels
)
print(f"Test Accuracy: {acc:.4f}")

from sklearn.metrics import classification_report

y_pred = model.predict(test_encodings)

y_pred

